<1>
이번에는 LiveData와 MVVM과 DataBinding을 같이 사용하면서 알아보겠습니다.

<2>
LiveData란 데이터의 변경을 관찰 할 수있는 클래스입니다. 일반적인 클래스들과 달리 안드로이드의 생명주기를 알고있다는게 큰 차이점입니다.
그래서 LiveData는 생명주기중 활성상태인 경우에만 데이터를 업데이트를 합니다. 또 Observer 객체와 함께 사용됩니다.
Obsever 라는것은 간단하게 객체의 상태변화를 관찰하는 것이라고 생각하면 됩니다. 그래서 만약 LiveData의 데이터가 바뀌면 Observer 객체에 변화를 알려줘서 Observer로 데이터 처리를 하게됩니다.

<3>
말만들어도 복잡한 LiveData를 대체 왜 사용할까요? LiveData를 사용하면 다음과 같은 장점들이 있습니다.

1. UI와 데이터 상태의 일치를 보장합니다.
- LiveData의 값이 바뀔때마다 Observer가 UI를 업데이트를 시키기때문에 개발자가 일일히 업데이트 코드를 작성하지 않아도 되기 때문에 데이터와 UI를 완벽하게 일치 시킬 수 있습니다. 

2. 메모리 누수가 없다.
- Observer 객체는 안드로이드의 생명주기 객체와 결홥되어 있어서 컴포넌트가 Destroy 될때 메모리상에서 스스로 해제되므로 메모리 누수가 없습니다.

3. 생명주기 자동처리
- LiveData가 생명주기를 알고 있어서 자동으로 관리합니다. 

4. 최신 데이터를 유지해줌
- 수명주기가 비활성화되면 다시 활성화될때 최신 데이터를 수신합니다.

<4>
LiveData는 사용할때 Generic을 사용해서 관찰할 데이터 타입을 지정합니다.
실제 코딩시에는 LiveData는 불변객체이기 때문에 데이터를 쉽게 수정할 수 있는 가변객체인 MutableLiveData를 사용해서 데이터를 바꾸고 해당값을 LiveData에서 받아서씁니다.
이 부분은 나중에 디자인 패턴 강의에서 심도있게 다뤄보도록하고 MutableLiveData를 사용해서 실습을 해봅시다.


<4>
MVVM과 DataBinding과 함께 LiveData를 활용해봅시다.
먼저 데이터바인딩을 위한 세팅을 해줍니다.

<5>
그 다음 MVVM패턴에 맞게 MainActivity의 ViewModel을 생성해주고
데이터바인딩에서 EditText에 입력한 값을 Textview에 띄워주는 것과 비슷하게 이번에는 버튼을 누르면 유저 데이터를 가져와서 텍스트뷰에 보여줘봅시다.
먼저 MutableLiveData인 userData를 만듭니다.
그 userData에 값을 설정하는 메소드를 setUserData()라고 합시다.
설정을 해주려면 데이터를 먼저 가져와야겠죠?
데이터를 가져오는 메소드를 getUserData()라고 합시다.
그래서 setUserData 메소드가 실행되면 getUserData를 통해서 가져온 데이터를 userData에 넣어주게 됩니다.

<6>
이제 MainAcitivty에서 DataBinding과 MVVM 패턴을 사용할 수 있게 설정해줍시다.
먼저 build.gradle(Module:~)로 가서 다음과 같이 추가해줍시다.
그리고 MainActivity로 가서 Binding과 viewModel을 다음과 같이 세팅해줍니다.
그럼 이제 DataBinding과 MVVM 패턴을 사용하기 위한 ViewModel의 세팅이 끝났습니다.

<7>
이제 버튼을 누르면 데이터를 가져오고 UI에 반영하는 것을 구현해봅시다.

버튼에 온클릭 리스너를 달아주고 버튼이 눌리면 viewModel에서 데이터를 가져오는 메소드인 setUserData를 실행시킵니다.
setUserData로 바뀐 userData를 옵저버로 관찰하는 userObserver를 생성하고 변화를 감지하면 onChanged 메소드가 실행되면서 xml에 데이터를 반영시켜주면 끝입니다.

실제로 실행시켜보면 바로 바뀌는 것을 볼 수 있습니다.
그렇지만 실시간으로 바뀌는건지 제대로 확인하기 어렵겠죠?
저번에 현재시각을 가져오는 프로젝트를 한번 해봤으니 이 프로젝트에 현재시각을 가져오는 코드를 응용해서 실시간으로 바뀌는지 직접해보세요.