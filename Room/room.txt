<1>
이번에는 Room에 대해서 알아보겠습니다.

<2>
Room이란 기존에 안드로이드에서 주로 사용하던 SQLite를 더 사용하기 쉽게 도와주는 데이터베이스 라이브러리입니다.

구성요소로는
Entity, DAO, Room Database로 이루어져있습니다. 그림에서 보이듯이 서로 의존관계가 성립하고 있어서 3가지 모두를 이해해야 사용할 수 있습니다.

<3>
먼저 Entity는 데이터베이스 내의 테이블을 뜻하며 DB에 저장할 데이터 형식을 정의합니다.
예를 들어 우리가 다음과 같이 User라는 데이터를 저장하려고 한다면 어떻게 해야할까요?

Entity가 User 클래스를 저장한다는 것을 지정해주고 저장되는 User의 속성들을 지정시켜야 정상적으로 DB에 저장이되겠죠?
그래서 먼저 User 클래스가 Entity에 사용되게 @Entity 어노테이션을 추가해줍니다. 그 다음 각 속성의 이름을 지정시켜 DB에 저장될 속성의 이름을 지정해줍니다.
@ColumnInfo 어노테이션에 name = ""에 DB에 저장될 속성의 이름을 입력해주면 됩니다.

<4>
DAO는 데이터베이스에 접근하여 수행할 작업들을 메소드 형태로 정의합니다.
다음과 같이 @Dao 어노테이션을 사용하고 추상 메소드들을 생성하여 기능들을 구현합니다.
여기서는 user 테이블에 있는 모든 데이터를 가져오는 getAll 메소드
User 객체를 DB에 넣는 insert 메소드
DB에 존재하는 데이터중 User 객체에 해당하는 데이터를 삭제하는 delete 메소드를 생성해줬습니다.
<5>
Room Database는 데이터베이스의 전체적인 소유자 역할을 하며 DB를 새롭게 생성하거나 버전을 관리합니다.
앞에서 생성한 Entity와 Dao 클래스를 통합적으로 묶어서 데이터베이스를 생성하거나 버전관리를 진행합니다.
@Databse 어노테이션에 entities 값을 설정하고싶은 Entity 클래스를 추가해줘야하고 version도 설정해줍니다.
AppDatabase 객체는 객체를 인스턴스화 할때 리소스를 많이 소비하기때문에 싱글톤 디자인 패턴을 사용합니다. 싱글톤에 대해서는 나중에 자세히 배우고 여기서는 객체를 인스턴스화할때 하나의 인스턴스만 사용하게하는 것이라고 생각하면 됩니다.

<6>
그럼 실제로 프로젝트를 통해서 Room을 사용해봅시다.
먼저 build.gradle(Module ~)에 다음과 같이 추가해줍니다.

<7>
그다음 전에 했던것처럼 User, UserDao, AppDatabase를 만들어줍니다.

<8>
이제 뷰를 만들어봅시다. DB에 User 값을 넣고 삭제하고 표시해봅시다. 여기선 간단하게 TextView에 모두 나타내줍시다.
activity_main.xml을 불러와 바꿉니다. 그 다음 MainActivity 클래스를 다음과같이 바꿔줍니다.
데이터베이스 작업은 메인스레드에서 접근할 수 없으므로 새로운 스레드를 생성해서 작업해주도록 합시다.
실행을 시켜보면 정상적으로 room이 실행되는 것을 볼 수 있습니다.